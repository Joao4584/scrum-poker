generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  en_us
  pt_br
}

model User {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @default(uuid())
  name       String
  email      String    @unique
  password   String?
  githubId   String?   @unique
  googleId   String?   @unique
  avatarUrl  String?
  status     String    @default("available")
  githubLink String?
  bio        String?
  language   Language  @default(pt_br)
  lastOnline DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")

  createdRooms      Room[]            @relation("CreatedRooms")
  roomParticipation RoomParticipant[]

  votes            Vote[]
  LobbyParticipant LobbyParticipant[]

  @@map("users")
}

model Lobby {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  maxCapacity Int       @default(15) // MÃ¡ximo de 15 pessoas por lobby
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  participants LobbyParticipant[]
}

model LobbyParticipant {
  id        Int       @id @default(autoincrement())
  lobbyId   Int
  userId    Int
  joinedAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  lobby Lobby @relation(fields: [lobbyId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([lobbyId, userId])
}

model Room {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid())
  publicId    String  @unique @default(cuid())
  name        String
  description String?
  isPublic    Boolean @default(true)
  votingScale String?
  status      String  @default("open")
  password    String?

  ownerId      Int
  owner        User              @relation("CreatedRooms", fields: [ownerId], references: [id])
  participants RoomParticipant[]
  questions    Question[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
}

model RoomParticipant {
  id        Int       @id @default(autoincrement())
  roomId    Int
  userId    Int
  isAdmin   Boolean   @default(false)
  joinedAt  DateTime  @default(now())
  deletedAt DateTime? @map("deleted_at")

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
}

model Question {
  id       Int     @id @default(autoincrement())
  roomId   Int
  text     String
  revealed Boolean @default(false)
  isActive Boolean @default(false)

  votes Vote[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")

  room Room @relation(fields: [roomId], references: [id])
}

model Vote {
  id         Int       @id @default(autoincrement())
  questionId Int
  userId     Int
  value      String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime? @map("deleted_at")

  question Question @relation(fields: [questionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([questionId, userId])
}
